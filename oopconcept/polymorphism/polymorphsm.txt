class Cat:
    def __init__(self,v1,v2):
        self.v1 = v1
        self.v2 = v2

    def eat(self,v1):
        self.v1 = v1
        print("milk")

    def eat(self,v2):
        self.v2 = v2
        print("v1 is %s and v2 is %d"%(self.v1,self.v2))

obj = Cat("Athulya",23)
obj.eat(9)


print("---------- function over loading in polymorphism---------")

class new:
    def hello(self,a,b):
        self.a = a
        self.b = b

    def hello(self,a = None,b = None,c = None):
        self.a = a
        self.b = b
        self.c = c

        x = 0
        if a != None and b != None and c != None:
            x = a + b + c
        elif a != None and b!= None:
            x = a + b
        else:
            x = a
        print(x)


obj = new()
obj.hello(2,3)

print("-----operator overloading-------")

class Point:
    def __init__(self,x,y):
        self.x = x
        self.y = y

    def __add__(self,other):
        x = self.x + other.x
        y = self.y + other.y

        return Point(x,y)

    def __str__(self):
        return "({0}.{1})".format(self.x,self.y)

p1 = Point(5,7)
p2 = Point(4,6)



print("---------over riding--------")

class Parent:
    def mymethod(self):
        print("calling parent method")

class Child(Parent):
    def myethod(self):
        print("calling child method")

c = Child()
c.mymethod()


print("-----super class-------")

class Firstclass():
    def __init__(self,v1,v2):
        print("I am in first class")
        self.v1 = v1
        self.v2 = v2
    def printvalue(self):
        print("values are ",self.v1,'and',self.v2)

class Secondclass(Firstclass):
    def __init__(self,v1,v2,v3):
        self.v3 = v3
        super().__init__(v1,v2)
    def printvalue(self):
        print("I am in second class")
    def printvalue(self):
        print("I am in second class printvalue")

object = Secondclass(7,2,3)
object.printvalue()

print("-------super function 2--------")

class Shape():
    def area(self):
        print("area is ",0)

class Square(Shape):
    def __init__(self,length):
        super().area()
        self.length = length

    def area(self):
        print("area of the shape is : %d " %(self.length**2))

obj1 = Square(2)
obj1.area()